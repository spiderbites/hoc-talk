const withLoader = timeoutLength => WrappedComponent => {
  return class LoadingHOC extends React.Component {
    constructor(props) {
      super(props)
      this.state = {
        loading: true
      }
    }

    componentDidMount() {
      this.startTimer = Date.now()
      setTimeout(() => this.doneLoading(), timeoutLength)
    }

    doneLoading() {
      this.endTimer = Date.now()
      this.setState({ loading: false })
    }

    render() {
      const newProps = {
        loadingTime: ((this.endTimer - this.startTimer) / 1000).toFixed(2)
      }

      return this.state.loading ? (
        <Spinner />
      ) : (
        <WrappedComponent {...this.props} {...newProps} />
      )
    }
  }
}
